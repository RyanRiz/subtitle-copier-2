/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package subcp2;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.formdev.flatlaf.FlatIntelliJLaf;

import subcp2.service.Copy;
import subcp2.service.ExportFile;
import subcp2.utilities.Formatting;
import subcp2.service.ImportFile;
import subcp2.service.SaveFile;
import subcp2.service.SubtitleFile;

/**
 *
 * @author Ryan Rizky
 */
public class Main extends javax.swing.JFrame {


    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        centerFrameOnScreen();
    }

    private void centerFrameOnScreen() {
        // Calculate the center of the screen
        int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;
        int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;

        int frameWidth = getWidth();
        int frameHeight = getHeight();

        int x = (screenWidth - frameWidth) / 2;
        int y = (screenHeight - frameHeight) / 2;

        // Set the frame location to the center
        setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenu = new javax.swing.JPopupMenu();
        popTextToLeft = new javax.swing.JMenuItem();
        popTextToRight = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        popTimeToLeft = new javax.swing.JMenuItem();
        popTimeToRight = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        popBothToLeft = new javax.swing.JMenuItem();
        popBothToRight = new javax.swing.JMenuItem();
        mainPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        leftTable = new javax.swing.JTable();
        leftTool = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        leftText = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        leftStart = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        leftEnd = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        leftDuration = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        leftOption = new javax.swing.JPanel();
        leftButtonBold = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        leftButtonItalic = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        leftButtonUnderline = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rightTable = new javax.swing.JTable();
        rightTool = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        rightText = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        rightStart = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        rightEnd = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        rightDuration = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        rightOption = new javax.swing.JPanel();
        rightButtonBold = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        rightButtonItalic = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        rightButtonUnderline = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        openLeftSubtitle = new javax.swing.JMenuItem();
        openRightSubtitle = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu4 = new javax.swing.JMenu();
        leftImportText = new javax.swing.JMenuItem();
        rightImportText = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        leftImportTime = new javax.swing.JMenuItem();
        rightImportTime = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        leftExportText = new javax.swing.JMenuItem();
        rightExportText = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        leftExportTime = new javax.swing.JMenuItem();
        rightExportTime = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu6 = new javax.swing.JMenu();
        leftClose = new javax.swing.JMenuItem();
        rightClose = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        leftSave = new javax.swing.JMenuItem();
        rightSave = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        appExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        copyTextToLeft = new javax.swing.JMenuItem();
        copyTextToRight = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        copyTimeToLeft = new javax.swing.JMenuItem();
        copyTimeToRight = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        copyBothToLeft = new javax.swing.JMenuItem();
        copyBothToRight = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenu13 = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        redo = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem20 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();

        popTextToLeft.setText("Copy text to left");
        popTextToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popTextToLeftActionPerformed(evt);
            }
        });
        popMenu.add(popTextToLeft);

        popTextToRight.setText("Copy text to right");
        popTextToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popTextToRightActionPerformed(evt);
            }
        });
        popMenu.add(popTextToRight);
        popMenu.add(jSeparator8);

        popTimeToLeft.setText("Copy timestamp to left");
        popTimeToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popTimeToLeftActionPerformed(evt);
            }
        });
        popMenu.add(popTimeToLeft);

        popTimeToRight.setText("Copy timestamp to right");
        popTimeToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popTimeToRightActionPerformed(evt);
            }
        });
        popMenu.add(popTimeToRight);
        popMenu.add(jSeparator9);

        popBothToLeft.setText("Copy both to left");
        popBothToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popBothToLeftActionPerformed(evt);
            }
        });
        popMenu.add(popBothToLeft);

        popBothToRight.setText("Copy both to right");
        popBothToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popBothToRightActionPerformed(evt);
            }
        });
        popMenu.add(popBothToRight);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Subtitle Copier");
        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        mainPanel.setComponentPopupMenu(popMenu);
        mainPanel.setLayout(new java.awt.GridLayout(1, 2, 6, 0));

        leftTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        leftTable.setForeground(new java.awt.Color(48, 48, 48));
        leftTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Start Time", "End Time", "Duration", "Text"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        leftTable.setComponentPopupMenu(popMenu);
        leftTable.setRowHeight(25);
        leftTable.setShowGrid(true);
        leftTable.getTableHeader().setReorderingAllowed(false);
        leftTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(leftTable);
        if (leftTable.getColumnModel().getColumnCount() > 0) {
            leftTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            leftTable.getColumnModel().getColumn(0).setMaxWidth(40);
            leftTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            leftTable.getColumnModel().getColumn(1).setMaxWidth(100);
            leftTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            leftTable.getColumnModel().getColumn(2).setMaxWidth(100);
            leftTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            leftTable.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        leftTool.setBackground(new java.awt.Color(255, 255, 255));

        leftText.setColumns(20);
        leftText.setForeground(new java.awt.Color(48, 48, 48));
        leftText.setRows(5);
        leftText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                leftTextKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(leftText);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242)));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        leftStart.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(48, 48, 48));
        jLabel1.setText("Start Time");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftStart, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(leftStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        leftEnd.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(48, 48, 48));
        jLabel2.setText("End Time");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftEnd)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(leftEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        leftDuration.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(48, 48, 48));
        jLabel3.setText("Duration");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftDuration)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(leftDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        leftOption.setBackground(new java.awt.Color(255, 255, 255));
        leftOption.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 240, 240)));
        leftOption.setLayout(new java.awt.GridLayout(3, 1));

        leftButtonBold.setBackground(new java.awt.Color(255, 255, 255));
        leftButtonBold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftButtonBoldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                leftButtonBoldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                leftButtonBoldMouseExited(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subcp2/icon/format-bold-custom.png"))); // NOI18N

        javax.swing.GroupLayout leftButtonBoldLayout = new javax.swing.GroupLayout(leftButtonBold);
        leftButtonBold.setLayout(leftButtonBoldLayout);
        leftButtonBoldLayout.setHorizontalGroup(
            leftButtonBoldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftButtonBoldLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );
        leftButtonBoldLayout.setVerticalGroup(
            leftButtonBoldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftButtonBoldLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addGap(8, 8, 8))
        );

        leftOption.add(leftButtonBold);

        leftButtonItalic.setBackground(new java.awt.Color(255, 255, 255));
        leftButtonItalic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftButtonItalicMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                leftButtonItalicMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                leftButtonItalicMouseExited(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subcp2/icon/format-italic-custom.png"))); // NOI18N

        javax.swing.GroupLayout leftButtonItalicLayout = new javax.swing.GroupLayout(leftButtonItalic);
        leftButtonItalic.setLayout(leftButtonItalicLayout);
        leftButtonItalicLayout.setHorizontalGroup(
            leftButtonItalicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftButtonItalicLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5))
        );
        leftButtonItalicLayout.setVerticalGroup(
            leftButtonItalicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftButtonItalicLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel5)
                .addGap(8, 8, 8))
        );

        leftOption.add(leftButtonItalic);

        leftButtonUnderline.setBackground(new java.awt.Color(255, 255, 255));
        leftButtonUnderline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftButtonUnderlineMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                leftButtonUnderlineMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                leftButtonUnderlineMouseExited(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subcp2/icon/format-underline-custom.png"))); // NOI18N

        javax.swing.GroupLayout leftButtonUnderlineLayout = new javax.swing.GroupLayout(leftButtonUnderline);
        leftButtonUnderline.setLayout(leftButtonUnderlineLayout);
        leftButtonUnderlineLayout.setHorizontalGroup(
            leftButtonUnderlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftButtonUnderlineLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6))
        );
        leftButtonUnderlineLayout.setVerticalGroup(
            leftButtonUnderlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftButtonUnderlineLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel6)
                .addGap(8, 8, 8))
        );

        leftOption.add(leftButtonUnderline);

        javax.swing.GroupLayout leftToolLayout = new javax.swing.GroupLayout(leftTool);
        leftTool.setLayout(leftToolLayout);
        leftToolLayout.setHorizontalGroup(
            leftToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftToolLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftOption, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        leftToolLayout.setVerticalGroup(
            leftToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftToolLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(leftToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(leftToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3)
                        .addComponent(leftOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(leftTool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(leftTool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        mainPanel.add(leftPanel);

        rightTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rightTable.setForeground(new java.awt.Color(48, 48, 48));
        rightTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Start Time", "End Time", "Duration", "Text"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rightTable.setComponentPopupMenu(popMenu);
        rightTable.setRowHeight(25);
        rightTable.setShowGrid(true);
        rightTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(rightTable);
        if (rightTable.getColumnModel().getColumnCount() > 0) {
            rightTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            rightTable.getColumnModel().getColumn(0).setMaxWidth(40);
            rightTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            rightTable.getColumnModel().getColumn(1).setMaxWidth(100);
            rightTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            rightTable.getColumnModel().getColumn(2).setMaxWidth(100);
            rightTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            rightTable.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        rightTool.setBackground(new java.awt.Color(255, 255, 255));

        rightText.setColumns(20);
        rightText.setForeground(new java.awt.Color(48, 48, 48));
        rightText.setRows(5);
        rightText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rightTextKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(rightText);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242)));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        rightStart.setEditable(false);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(48, 48, 48));
        jLabel7.setText("Start Time");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rightStart, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rightStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));

        rightEnd.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(48, 48, 48));
        jLabel8.setText("End Time");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rightEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rightEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        rightDuration.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(48, 48, 48));
        jLabel9.setText("Duration");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rightDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(rightDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        rightOption.setBackground(new java.awt.Color(255, 255, 255));
        rightOption.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 240, 240)));
        rightOption.setLayout(new java.awt.GridLayout(3, 1));

        rightButtonBold.setBackground(new java.awt.Color(255, 255, 255));
        rightButtonBold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightButtonBoldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rightButtonBoldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rightButtonBoldMouseExited(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subcp2/icon/format-bold-custom.png"))); // NOI18N

        javax.swing.GroupLayout rightButtonBoldLayout = new javax.swing.GroupLayout(rightButtonBold);
        rightButtonBold.setLayout(rightButtonBoldLayout);
        rightButtonBoldLayout.setHorizontalGroup(
            rightButtonBoldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightButtonBoldLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10))
        );
        rightButtonBoldLayout.setVerticalGroup(
            rightButtonBoldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightButtonBoldLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel10)
                .addGap(8, 8, 8))
        );

        rightOption.add(rightButtonBold);

        rightButtonItalic.setBackground(new java.awt.Color(255, 255, 255));
        rightButtonItalic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightButtonItalicMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rightButtonItalicMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rightButtonItalicMouseExited(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subcp2/icon/format-italic-custom.png"))); // NOI18N

        javax.swing.GroupLayout rightButtonItalicLayout = new javax.swing.GroupLayout(rightButtonItalic);
        rightButtonItalic.setLayout(rightButtonItalicLayout);
        rightButtonItalicLayout.setHorizontalGroup(
            rightButtonItalicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightButtonItalicLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel11))
        );
        rightButtonItalicLayout.setVerticalGroup(
            rightButtonItalicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightButtonItalicLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel11)
                .addGap(8, 8, 8))
        );

        rightOption.add(rightButtonItalic);

        rightButtonUnderline.setBackground(new java.awt.Color(255, 255, 255));
        rightButtonUnderline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightButtonUnderlineMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rightButtonUnderlineMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rightButtonUnderlineMouseExited(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subcp2/icon/format-underline-custom.png"))); // NOI18N

        javax.swing.GroupLayout rightButtonUnderlineLayout = new javax.swing.GroupLayout(rightButtonUnderline);
        rightButtonUnderline.setLayout(rightButtonUnderlineLayout);
        rightButtonUnderlineLayout.setHorizontalGroup(
            rightButtonUnderlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightButtonUnderlineLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel12))
        );
        rightButtonUnderlineLayout.setVerticalGroup(
            rightButtonUnderlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightButtonUnderlineLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel12)
                .addGap(8, 8, 8))
        );

        rightOption.add(rightButtonUnderline);

        javax.swing.GroupLayout rightToolLayout = new javax.swing.GroupLayout(rightTool);
        rightTool.setLayout(rightToolLayout);
        rightToolLayout.setHorizontalGroup(
            rightToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightToolLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightOption, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        rightToolLayout.setVerticalGroup(
            rightToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightToolLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(rightToolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(rightTool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightTool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanel.add(rightPanel);

        jMenu1.setText("File");

        jMenu3.setText("Load subtitle");

        openLeftSubtitle.setText("Load left subtitle");
        openLeftSubtitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLeftSubtitleActionPerformed(evt);
            }
        });
        jMenu3.add(openLeftSubtitle);

        openRightSubtitle.setText("Load right subtitle");
        openRightSubtitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRightSubtitleActionPerformed(evt);
            }
        });
        jMenu3.add(openRightSubtitle);

        jMenu1.add(jMenu3);
        jMenu1.add(jSeparator1);

        jMenu4.setText("Import");

        leftImportText.setText("Import text left");
        leftImportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftImportTextActionPerformed(evt);
            }
        });
        jMenu4.add(leftImportText);

        rightImportText.setText("Import text right");
        rightImportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightImportTextActionPerformed(evt);
            }
        });
        jMenu4.add(rightImportText);
        jMenu4.add(jSeparator3);

        leftImportTime.setText("Import timestamp left");
        leftImportTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftImportTimeActionPerformed(evt);
            }
        });
        jMenu4.add(leftImportTime);

        rightImportTime.setText("Import timestamp right");
        rightImportTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightImportTimeActionPerformed(evt);
            }
        });
        jMenu4.add(rightImportTime);

        jMenu1.add(jMenu4);

        jMenu5.setText("Export");

        leftExportText.setText("Export text left");
        leftExportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftExportTextActionPerformed(evt);
            }
        });
        jMenu5.add(leftExportText);

        rightExportText.setText("Export text right");
        rightExportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightExportTextActionPerformed(evt);
            }
        });
        jMenu5.add(rightExportText);
        jMenu5.add(jSeparator5);

        leftExportTime.setText("Export timestamp left");
        leftExportTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftExportTimeActionPerformed(evt);
            }
        });
        jMenu5.add(leftExportTime);

        rightExportTime.setText("Export timestamp right");
        rightExportTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightExportTimeActionPerformed(evt);
            }
        });
        jMenu5.add(rightExportTime);

        jMenu1.add(jMenu5);
        jMenu1.add(jSeparator2);

        jMenu6.setText("Close subtitle");

        leftClose.setText("Close left subtitle");
        leftClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftCloseActionPerformed(evt);
            }
        });
        jMenu6.add(leftClose);

        rightClose.setText("Close right subtitle");
        rightClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightCloseActionPerformed(evt);
            }
        });
        jMenu6.add(rightClose);

        jMenu1.add(jMenu6);

        jMenu7.setText("Save subtitle");

        leftSave.setText("Save left subtitle");
        leftSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftSaveActionPerformed(evt);
            }
        });
        jMenu7.add(leftSave);

        rightSave.setText("Save right subtitle");
        rightSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightSaveActionPerformed(evt);
            }
        });
        jMenu7.add(rightSave);

        jMenu1.add(jMenu7);
        jMenu1.add(jSeparator4);

        appExit.setText("Exit");
        appExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appExitActionPerformed(evt);
            }
        });
        jMenu1.add(appExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu8.setText("Text");

        copyTextToLeft.setText("Copy text to left");
        copyTextToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyTextToLeftActionPerformed(evt);
            }
        });
        jMenu8.add(copyTextToLeft);

        copyTextToRight.setText("Copy text to right");
        copyTextToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyTextToRightActionPerformed(evt);
            }
        });
        jMenu8.add(copyTextToRight);

        jMenu2.add(jMenu8);

        jMenu9.setText("Timestamp");

        copyTimeToLeft.setText("Copy timestamp to left");
        copyTimeToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyTimeToLeftActionPerformed(evt);
            }
        });
        jMenu9.add(copyTimeToLeft);

        copyTimeToRight.setText("Copy timestamp to right");
        copyTimeToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyTimeToRightActionPerformed(evt);
            }
        });
        jMenu9.add(copyTimeToRight);

        jMenu2.add(jMenu9);

        jMenu10.setText("Both");

        copyBothToLeft.setText("Copy both to left");
        copyBothToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBothToLeftActionPerformed(evt);
            }
        });
        jMenu10.add(copyBothToLeft);

        copyBothToRight.setText("Copy both to right");
        copyBothToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBothToRightActionPerformed(evt);
            }
        });
        jMenu10.add(copyBothToRight);

        jMenu2.add(jMenu10);
        jMenu2.add(jSeparator7);

        jMenu13.setText("Undo");

        undo.setText("Undo text only");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        jMenu13.add(undo);

        jMenuItem24.setText("Undo timestamp only");
        jMenu13.add(jMenuItem24);

        jMenuItem25.setText("Undo both");
        jMenu13.add(jMenuItem25);

        jMenu2.add(jMenu13);

        jMenu14.setText("Redo");

        redo.setText("Redo text only");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        jMenu14.add(redo);

        jMenuItem27.setText("Redo timestamp only");
        jMenu14.add(jMenuItem27);

        jMenuItem28.setText("Redo both");
        jMenu14.add(jMenuItem28);

        jMenu2.add(jMenu14);

        jMenuBar1.add(jMenu2);

        jMenu11.setText("Search & Check");

        jMenuItem20.setText("Search...");
        jMenu11.add(jMenuItem20);
        jMenu11.add(jSeparator6);

        jMenu12.setText("Spell check");

        jMenuItem21.setText("Spell check left");
        jMenu12.add(jMenuItem21);

        jMenuItem22.setText("Spell check right");
        jMenu12.add(jMenuItem22);

        jMenu11.add(jMenu12);

        jMenuBar1.add(jMenu11);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leftButtonBoldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonBoldMouseEntered
        leftButtonBold.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_leftButtonBoldMouseEntered

    private void leftButtonBoldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonBoldMouseExited
        leftButtonBold.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_leftButtonBoldMouseExited

    private void leftButtonItalicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonItalicMouseEntered
        leftButtonItalic.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_leftButtonItalicMouseEntered

    private void leftButtonItalicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonItalicMouseExited
        leftButtonItalic.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_leftButtonItalicMouseExited

    private void leftButtonUnderlineMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonUnderlineMouseEntered
        leftButtonUnderline.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_leftButtonUnderlineMouseEntered

    private void leftButtonUnderlineMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonUnderlineMouseExited
        leftButtonUnderline.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_leftButtonUnderlineMouseExited

    private void rightButtonBoldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonBoldMouseEntered
        rightButtonBold.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_rightButtonBoldMouseEntered

    private void rightButtonBoldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonBoldMouseExited
        rightButtonBold.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_rightButtonBoldMouseExited

    private void rightButtonItalicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonItalicMouseEntered
        rightButtonItalic.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_rightButtonItalicMouseEntered

    private void rightButtonItalicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonItalicMouseExited
        rightButtonItalic.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_rightButtonItalicMouseExited

    private void rightButtonUnderlineMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonUnderlineMouseEntered
        rightButtonUnderline.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_rightButtonUnderlineMouseEntered

    private void rightButtonUnderlineMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonUnderlineMouseExited
        rightButtonUnderline.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_rightButtonUnderlineMouseExited

    private void openLeftSubtitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLeftSubtitleActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            SubtitleFile subtitleFile = new SubtitleFile();
            subtitleFile.loadSubtitleFile(selectedFile, leftTable.getModel());
        }
    }//GEN-LAST:event_openLeftSubtitleActionPerformed

    private void openRightSubtitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRightSubtitleActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            SubtitleFile subtitleFile = new SubtitleFile();
            subtitleFile.loadSubtitleFile(selectedFile, rightTable.getModel());
        }
    }//GEN-LAST:event_openRightSubtitleActionPerformed

    private void leftTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftTableMouseClicked
        int selectedRow = leftTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) leftTable.getModel();

            // Check if all data in the selected row is null
            boolean allDataNull = true;
            for (int col = 0; col < model.getColumnCount(); col++) {
                if (model.getValueAt(selectedRow, col) != null) {
                    allDataNull = false;
                    break;
                }
            }
    
            if (allDataNull) {
                JOptionPane.showMessageDialog(this, "No data in the leftTable row.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get data from the selected row
            String startTimeString = model.getValueAt(selectedRow, 1).toString();
            String endTimeString = model.getValueAt(selectedRow, 2).toString();
            String durationString = model.getValueAt(selectedRow, 3).toString();
            String textString = model.getValueAt(selectedRow, 4).toString();

            // Set data to the text field
            leftStart.setText(startTimeString);
            leftEnd.setText(endTimeString);
            leftDuration.setText(durationString);
            leftText.setText(textString);
        }
    }//GEN-LAST:event_leftTableMouseClicked

    private void rightTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightTableMouseClicked
        int selectedRow = rightTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) rightTable.getModel();

            // Check if all data in the selected row is null
            boolean allDataNull = true;
            for (int col = 0; col < model.getColumnCount(); col++) {
                if (model.getValueAt(selectedRow, col) != null) {
                    allDataNull = false;
                    break;
                }
            }
    
            if (allDataNull) {
                JOptionPane.showMessageDialog(this, "No data in the rightTable row.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get data from the selected row
            String startTimeString = model.getValueAt(selectedRow, 1).toString();
            String endTimeString = model.getValueAt(selectedRow, 2).toString();
            String durationString = model.getValueAt(selectedRow, 3).toString();
            String textString = model.getValueAt(selectedRow, 4).toString();

            // Set data to the text field
            rightStart.setText(startTimeString);
            rightEnd.setText(endTimeString);
            rightDuration.setText(durationString);
            rightText.setText(textString);
        }
    }//GEN-LAST:event_rightTableMouseClicked

    private void leftTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_leftTextKeyReleased
        int selectedRow = leftTable.getSelectedRow();

        if (selectedRow != 1) {
            DefaultTableModel model = (DefaultTableModel) leftTable.getModel();
            model.setValueAt(leftText.getText(), selectedRow, 4);
        }
    }//GEN-LAST:event_leftTextKeyReleased

    private void rightTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rightTextKeyReleased
        int selectedRow = rightTable.getSelectedRow();

        if (selectedRow != 1) {
            DefaultTableModel model = (DefaultTableModel) rightTable.getModel();
            model.setValueAt(rightText.getText(), selectedRow, 4);
        }
    }//GEN-LAST:event_rightTextKeyReleased

    private void leftImportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftImportTextActionPerformed
         // Check if there are subtitles in rightTable
         if (leftTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ImportFile importFile = new ImportFile();
            importFile.importText(selectedFile, leftTable.getModel());
        }
    }//GEN-LAST:event_leftImportTextActionPerformed

    private void rightImportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightImportTextActionPerformed
        // Check if there are subtitles in rightTable
        if (rightTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ImportFile importFile = new ImportFile();
            importFile.importText(selectedFile, rightTable.getModel());
        }
    }//GEN-LAST:event_rightImportTextActionPerformed

    private void leftImportTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftImportTimeActionPerformed
        // Check if there are subtitles in rightTable
        if (leftTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ImportFile importFile = new ImportFile();
            importFile.importTime(selectedFile, leftTable.getModel());
        }
    }//GEN-LAST:event_leftImportTimeActionPerformed

    private void rightImportTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightImportTimeActionPerformed
        // Check if there are subtitles in rightTable
        if (rightTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ImportFile importFile = new ImportFile();
            importFile.importTime(selectedFile, rightTable.getModel());
        }
    }//GEN-LAST:event_rightImportTimeActionPerformed

    private void leftExportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftExportTextActionPerformed
        // Check if there are subtitles in the table
        if (leftTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ExportFile exportFile = new ExportFile();
            exportFile.exportText(selectedFile, leftTable.getModel());
        }
    }//GEN-LAST:event_leftExportTextActionPerformed

    private void rightExportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightExportTextActionPerformed
        // Check if there are subtitles in the table
        if (rightTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ExportFile exportFile = new ExportFile();
            exportFile.exportText(selectedFile, rightTable.getModel());
        }
    }//GEN-LAST:event_rightExportTextActionPerformed

    private void leftExportTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftExportTimeActionPerformed
        // Check if there are subtitles in the table
        if (leftTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ExportFile exportFile = new ExportFile();
            exportFile.exportTime(selectedFile, leftTable.getModel());
        }
    }//GEN-LAST:event_leftExportTimeActionPerformed

    private void rightExportTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightExportTimeActionPerformed
        // Check if there are subtitles in the table
        if (rightTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ExportFile exportFile = new ExportFile();
            exportFile.exportTime(selectedFile, rightTable.getModel());
        }
    }//GEN-LAST:event_rightExportTimeActionPerformed

    private void leftCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftCloseActionPerformed
        DefaultTableModel leftModel = (DefaultTableModel) leftTable.getModel();
        leftModel.setRowCount(0); // Clears the content of the left table
    }//GEN-LAST:event_leftCloseActionPerformed

    private void rightCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightCloseActionPerformed
        DefaultTableModel rightModel = (DefaultTableModel) rightTable.getModel();
        rightModel.setRowCount(0); // Clears the content of the right table
    }//GEN-LAST:event_rightCloseActionPerformed

    private void leftSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftSaveActionPerformed
        // Check if the table has fewer than 0 rows
        if (leftTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            SaveFile saveFile = new SaveFile();
            saveFile.save(leftTable.getModel(), selectedFile.getAbsolutePath() + ".srt");
            JOptionPane.showMessageDialog(this, "Subtitle saved successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_leftSaveActionPerformed

    private void rightSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightSaveActionPerformed
        // Check if the table has fewer than 0 rows
        if (rightTable.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No subtitles available.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            SaveFile saveFile = new SaveFile();
            saveFile.save(rightTable.getModel(), selectedFile.getAbsolutePath() + ".srt");
            JOptionPane.showMessageDialog(this, "Subtitle saved successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_rightSaveActionPerformed

    private void appExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_appExitActionPerformed

    private void copyTextToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTextToLeftActionPerformed
        Copy copy = new Copy();
        copy.text(rightTable, leftTable);
    }//GEN-LAST:event_copyTextToLeftActionPerformed

    private void copyTextToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTextToRightActionPerformed
        Copy copy = new Copy();
        copy.text(leftTable, rightTable);
    }//GEN-LAST:event_copyTextToRightActionPerformed

    private void copyTimeToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTimeToLeftActionPerformed
        Copy copy = new Copy();
        copy.timestamp(rightTable, leftTable);
    }//GEN-LAST:event_copyTimeToLeftActionPerformed

    private void copyTimeToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTimeToRightActionPerformed
        Copy copy = new Copy();
        copy.timestamp(leftTable, rightTable);
    }//GEN-LAST:event_copyTimeToRightActionPerformed

    private void copyBothToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBothToLeftActionPerformed
        Copy copy = new Copy();
        copy.both(rightTable, leftTable);
    }//GEN-LAST:event_copyBothToLeftActionPerformed

    private void copyBothToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBothToRightActionPerformed
        Copy copy = new Copy();
        copy.both(leftTable, rightTable);
    }//GEN-LAST:event_copyBothToRightActionPerformed

    private void leftButtonBoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonBoldMouseClicked
        int selectedRow = leftTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) leftTable.getModel();
            String textString = model.getValueAt(selectedRow, 4).toString();
            Formatting format = new Formatting();
            String formatted = format.bold(textString);
            leftText.setText(formatted);
            model.setValueAt(formatted, selectedRow, 4);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_leftButtonBoldMouseClicked

    private void leftButtonItalicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonItalicMouseClicked
        int selectedRow = leftTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) leftTable.getModel();
            String textString = model.getValueAt(selectedRow, 4).toString();
            Formatting format = new Formatting();
            String formatted = format.italic(textString);
            leftText.setText(formatted);
            model.setValueAt(formatted, selectedRow, 4);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_leftButtonItalicMouseClicked

    private void leftButtonUnderlineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftButtonUnderlineMouseClicked
        int selectedRow = leftTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) leftTable.getModel();
            String textString = model.getValueAt(selectedRow, 4).toString();
            Formatting format = new Formatting();
            String formatted = format.underline(textString);
            leftText.setText(formatted);
            model.setValueAt(formatted, selectedRow, 4);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_leftButtonUnderlineMouseClicked

    private void rightButtonBoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonBoldMouseClicked
        int selectedRow = rightTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) rightTable.getModel();
            String textString = model.getValueAt(selectedRow, 4).toString();
            Formatting format = new Formatting();
            String formatted = format.bold(textString);
            rightText.setText(formatted);
            model.setValueAt(formatted, selectedRow, 4);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rightButtonBoldMouseClicked

    private void rightButtonItalicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonItalicMouseClicked
        int selectedRow = rightTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) rightTable.getModel();
            String textString = model.getValueAt(selectedRow, 4).toString();
            Formatting format = new Formatting();
            String formatted = format.italic(textString);
            rightText.setText(formatted);
            model.setValueAt(formatted, selectedRow, 4);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rightButtonItalicMouseClicked

    private void rightButtonUnderlineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightButtonUnderlineMouseClicked
        int selectedRow = rightTable.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) rightTable.getModel();
            String textString = model.getValueAt(selectedRow, 4).toString();
            Formatting format = new Formatting();
            String formatted = format.underline(textString);
            rightText.setText(formatted);
            model.setValueAt(formatted, selectedRow, 4);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rightButtonUnderlineMouseClicked

    private void showPopup(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            popMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        showPopup(evt);
    }//GEN-LAST:event_formMouseReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        showPopup(evt);
    }//GEN-LAST:event_formMousePressed

    private void popTextToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popTextToLeftActionPerformed
        copyTextToLeftActionPerformed(evt);
    }//GEN-LAST:event_popTextToLeftActionPerformed

    private void popTextToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popTextToRightActionPerformed
        copyTextToRightActionPerformed(evt);
    }//GEN-LAST:event_popTextToRightActionPerformed

    private void popTimeToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popTimeToLeftActionPerformed
        copyTimeToLeftActionPerformed(evt);
    }//GEN-LAST:event_popTimeToLeftActionPerformed

    private void popTimeToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popTimeToRightActionPerformed
        copyTimeToRightActionPerformed(evt);
    }//GEN-LAST:event_popTimeToRightActionPerformed

    private void popBothToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popBothToLeftActionPerformed
        copyBothToLeftActionPerformed(evt);
    }//GEN-LAST:event_popBothToLeftActionPerformed

    private void popBothToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popBothToRightActionPerformed
        copyBothToRightActionPerformed(evt);
    }//GEN-LAST:event_popBothToRightActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        
    }//GEN-LAST:event_redoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatIntelliJLaf.setup(); //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem appExit;
    private javax.swing.JMenuItem copyBothToLeft;
    private javax.swing.JMenuItem copyBothToRight;
    private javax.swing.JMenuItem copyTextToLeft;
    private javax.swing.JMenuItem copyTextToRight;
    private javax.swing.JMenuItem copyTimeToLeft;
    private javax.swing.JMenuItem copyTimeToRight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JPanel leftButtonBold;
    private javax.swing.JPanel leftButtonItalic;
    private javax.swing.JPanel leftButtonUnderline;
    private javax.swing.JMenuItem leftClose;
    private javax.swing.JFormattedTextField leftDuration;
    private javax.swing.JFormattedTextField leftEnd;
    private javax.swing.JMenuItem leftExportText;
    private javax.swing.JMenuItem leftExportTime;
    private javax.swing.JMenuItem leftImportText;
    private javax.swing.JMenuItem leftImportTime;
    private javax.swing.JPanel leftOption;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JMenuItem leftSave;
    private javax.swing.JFormattedTextField leftStart;
    private javax.swing.JTable leftTable;
    private javax.swing.JTextArea leftText;
    private javax.swing.JPanel leftTool;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem openLeftSubtitle;
    private javax.swing.JMenuItem openRightSubtitle;
    private javax.swing.JMenuItem popBothToLeft;
    private javax.swing.JMenuItem popBothToRight;
    private javax.swing.JPopupMenu popMenu;
    private javax.swing.JMenuItem popTextToLeft;
    private javax.swing.JMenuItem popTextToRight;
    private javax.swing.JMenuItem popTimeToLeft;
    private javax.swing.JMenuItem popTimeToRight;
    private javax.swing.JMenuItem redo;
    private javax.swing.JPanel rightButtonBold;
    private javax.swing.JPanel rightButtonItalic;
    private javax.swing.JPanel rightButtonUnderline;
    private javax.swing.JMenuItem rightClose;
    private javax.swing.JFormattedTextField rightDuration;
    private javax.swing.JFormattedTextField rightEnd;
    private javax.swing.JMenuItem rightExportText;
    private javax.swing.JMenuItem rightExportTime;
    private javax.swing.JMenuItem rightImportText;
    private javax.swing.JMenuItem rightImportTime;
    private javax.swing.JPanel rightOption;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JMenuItem rightSave;
    private javax.swing.JFormattedTextField rightStart;
    private javax.swing.JTable rightTable;
    private javax.swing.JTextArea rightText;
    private javax.swing.JPanel rightTool;
    private javax.swing.JMenuItem undo;
    // End of variables declaration//GEN-END:variables
}
